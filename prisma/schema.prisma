generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @map("name")
  email     String   @unique @map("email")
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("created_at")
  settings  UserSettings?
  @@map("users")
}

model UserSettings {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  gmailAccessToken  String?
  gmailRefreshToken String?
  gmailTokenExpiry  DateTime?
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  @@map("user_settings")
}

model Segment {
  id        Int      @id @default(autoincrement())
  name      String   
  createdAt DateTime @default(now()) @map("created_at")
  leads     Lead[]
  @@map("segments")
  EmailCampaign EmailCampaign[]
}

model Lead {
  id        Int       @id @default(autoincrement())
  name      String    @map("name")
  company   String?   @map("company")
  email     String?   @map("email")
  phone     String?   @map("phone")
  segmentId Int?      @map("segment_id")
  segment   Segment?  @relation(fields: [segmentId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  emailTracking EmailTracking[] @relation("LeadToEmailTracking")
  @@map("leads")
}

model EmailCampaign {
  id          Int       @id @default(autoincrement())
  name        String
  segmentId   Int?
  segment     Segment?   @relation(fields: [segmentId], references: [id])
  sequences   EmailSequence[] @relation("CampaignToSequence")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  @@map("email_campaigns")
}

model EmailSequence {
  id            Int       @id @default(autoincrement())
  campaignId    Int       @map("campaign_id")
  campaign      EmailCampaign @relation("CampaignToSequence", fields: [campaignId], references: [id], onDelete: Cascade)
  subject       String
  content       String    @db.Text
  delayDays     Int       @map("delay_days")
  orderIndex    Int       @map("order_index")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  @@map("email_sequences")
  EmailTracking EmailTracking[] @relation("SequenceToTracking")
}

model EmailTracking {
  id            Int       @id @default(autoincrement())
  leadId        Int       @map("lead_id")
  lead          Lead      @relation("LeadToEmailTracking", fields: [leadId], references: [id], onDelete: Cascade)
  sequenceId    Int       @map("sequence_id")
  sequence      EmailSequence @relation("SequenceToTracking", fields: [sequenceId], references: [id], onDelete: Cascade)
  opened        Boolean   @default(false)
  openCount     Int       @default(0) @map("open_count")
  replied       Boolean   @default(false)
  sentAt        DateTime  @map("sent_at")
  threadId      String?   @map("thread_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  @@map("email_tracking")
}

model EmailLog {
  id             String   @id @default(cuid())
  recipientEmail String
  subject        String
  content        String   @db.Text
  status         String   // SENT, FAILED
  type           String   // BULK, CAMPAIGN, INDIVIDUAL
  error          String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
